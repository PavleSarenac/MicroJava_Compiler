package rs.ac.bg.etf.pp1;
 
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
 
parser code {:
	private Logger logger = Logger.getLogger(getClass());
	private boolean isErrorDetected = false;
 
	public boolean isSyntaxAnalysisErrorDetected() {
		return isErrorDetected;
	}
	
    public void report_error(String message, Object info) {
    	isErrorDetected = true;
		int errorLineNumber = -1;
		if (info instanceof Symbol) {
			errorLineNumber = ((Symbol)info).left;
		} else if (info instanceof Integer) {
			errorLineNumber = (int)info;
		}
		if (errorLineNumber == -1) {
			logger.error(message);
		} else {
			logger.error(message + " (line " + errorLineNumber + ").");
		}
    }
    
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing must be stopped", cur_token);
    }
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
:}

/* terminals */
terminal PROGRAM, BREAK, CONST, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, CONTINUE, FOR;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL, LOGICAL_AND, LOGICAL_OR, ASSIGN, INCREMENT, DECREMENT, SEMICOLON, COMMA, LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal NUMBER, BOOLEAN, CHARACTER, IDENTIFICATOR;

/* official nonterminals */
nonterminal Program, ConstDecl, VarDecl, MethodDecl, FormPars, Type, Statement, DesignatorStatement, ActPars, Condition, CondTerm, CondFact, Expr, Term, Factor, Designator, Assignop, Relop, Addop, Mulop;

/* my nonterminals */
nonterminal GlobalDeclList, GlobalDecl;
nonterminal ConstDeclList, ConstDeclElement, Const; 
nonterminal VarDeclList, VarDeclElement; 
nonterminal ArrayBrackets, OneDimensionalArrayBrackets, TwoDimensionalArrayBrackets;
nonterminal MethodDeclList, MethodReturnType, MethodFormalParameters, TypedVarDeclElement, MethodVariableDeclarations, MethodStatements;
nonterminal PrintMethodActualParameters;
nonterminal OptionalMinusSign, ExprExtension;
nonterminal OptionalMethodCall, OptionalActPars;
nonterminal ExprArrayBrackets, ExprOneDimensionalArrayBrackets, ExprTwoDimensionalArrayBrackets;
nonterminal DesignatorElementAccess;
nonterminal TermExtension;
nonterminal CondFactExtension;
nonterminal CondTermExtension;
nonterminal ConditionExtension;
nonterminal OptionalExpr;
nonterminal ForLoop, ForLoopInitialization, ForLoopCondition, ForLoopPostIteration, ForLoopInitializationExtension;
nonterminal DesignatorStatementOperation, DesignatorStatementArrayUnpacking;
nonterminal DesignatorList, OptionalDesignator;
nonterminal OptionalElse;

precedence left ELSE;

/* official nonterminal #1 */
Program ::= PROGRAM IDENTIFICATOR GlobalDeclList LEFT_BRACE MethodDeclList RIGHT_BRACE;

/* official nonterminal #3 */
ConstDecl ::= ConstDecl COMMA ConstDeclElement
            | ConstDeclElement;
            
/* official nonterminal #4 */
VarDecl ::= VarDecl COMMA VarDeclElement
          | VarDeclElement;
          
/* official nonterminal #7 */
MethodDecl ::= MethodReturnType IDENTIFICATOR LEFT_PARENTHESES MethodFormalParameters RIGHT_PARENTHESES MethodVariableDeclarations LEFT_BRACE MethodStatements RIGHT_BRACE;

/* official nonterminal #8 */
FormPars ::= FormPars COMMA TypedVarDeclElement
           | TypedVarDeclElement;
           
/* official nonterminal #9 */
Type ::= IDENTIFICATOR;

/* official nonterminal #10 */
Statement ::= DesignatorStatement SEMICOLON
            | IF LEFT_PARENTHESES Condition RIGHT_PARENTHESES Statement OptionalElse
            | BREAK SEMICOLON
            | CONTINUE SEMICOLON
            | RETURN OptionalExpr SEMICOLON
            | READ LEFT_PARENTHESES Designator RIGHT_PARENTHESES SEMICOLON
            | PRINT LEFT_PARENTHESES PrintMethodActualParameters RIGHT_PARENTHESES SEMICOLON
            | ForLoop
            | LEFT_BRACE MethodStatements RIGHT_BRACE;
            
/* official nonterminal #11 */
DesignatorStatement ::= Designator DesignatorStatementOperation
                      | DesignatorStatementArrayUnpacking;
            
/* official nonterminal #12 */
ActPars ::= ActPars COMMA Expr
          | Expr;

/* official nonterminal #13 */
Condition ::= CondTerm ConditionExtension;

/* official nonterminal #14 */
CondTerm ::= CondFact CondTermExtension;

/* official nonterminal #15 */
CondFact ::= Expr CondFactExtension;

/* official nonterminal #16 */
Expr ::= OptionalMinusSign Term ExprExtension;

/* official nonterminal #17 */
Term ::= Factor TermExtension;
            
/* official nonterminal #18 */
Factor ::= Designator OptionalMethodCall
         | Const
         | NEW Type ExprArrayBrackets
         | LEFT_PARENTHESES Expr RIGHT_PARENTHESES;
         
/* official nonterminal #19 */         
Designator ::= IDENTIFICATOR DesignatorElementAccess;

/* official nonterminal #21 */
Assignop ::= ASSIGN;

/* official nonterminal #22 */
Relop ::= EQUALS
        | NOT_EQUALS
        | GREATER_THAN
        | GREATER_THAN_OR_EQUAL
        | LESS_THAN
        | LESS_THAN_OR_EQUAL;
     
/* official nonterminal #23 */
Addop ::= PLUS
        | MINUS;

/* official nonterminal #24 */
Mulop ::= MULTIPLY
        | DIVIDE
        | MODULO;

GlobalDeclList ::= GlobalDeclList GlobalDecl
                 | /* epsilon */;
                 
GlobalDecl ::= ConstDeclList
             | VarDeclList;

ConstDeclList ::= CONST Type ConstDecl SEMICOLON;
                
ConstDeclElement ::= IDENTIFICATOR ASSIGN Const;

Const ::= NUMBER
        | CHARACTER
        | BOOLEAN;
        
VarDeclList ::= Type VarDecl SEMICOLON;
              
VarDeclElement ::= IDENTIFICATOR ArrayBrackets;

ArrayBrackets ::= OneDimensionalArrayBrackets
                | TwoDimensionalArrayBrackets
                | /* epsilon */;
                
OneDimensionalArrayBrackets ::= LEFT_BRACKET RIGHT_BRACKET;

TwoDimensionalArrayBrackets ::= OneDimensionalArrayBrackets OneDimensionalArrayBrackets;

MethodDeclList ::= MethodDeclList MethodDecl
                 | /* epsilon */;

MethodReturnType ::= Type
                   | VOID;
                   
MethodFormalParameters ::= FormPars
                         | /* epsilon */;
               
TypedVarDeclElement ::= Type VarDeclElement;
                         
MethodVariableDeclarations ::= MethodVariableDeclarations VarDeclList
                             | /* epsilon */;
                             
MethodStatements ::= MethodStatements Statement
                   | /* epsilon */;
            
PrintMethodActualParameters ::= Expr COMMA NUMBER
                              | Expr;

OptionalMinusSign ::= MINUS
                    | /* epsilon */;
                    
ExprExtension ::= ExprExtension Addop Term
                | /* epsilon */;
                    
OptionalMethodCall ::= LEFT_PARENTHESES OptionalActPars RIGHT_PARENTHESES
                     | /* epsilon */;
                     
OptionalActPars ::= ActPars
                  | /* epsilon */;
                    
ExprArrayBrackets ::= ExprOneDimensionalArrayBrackets
                    | ExprTwoDimensionalArrayBrackets;

ExprOneDimensionalArrayBrackets ::= LEFT_BRACKET Expr RIGHT_BRACKET;

ExprTwoDimensionalArrayBrackets ::= ExprOneDimensionalArrayBrackets ExprOneDimensionalArrayBrackets;

DesignatorElementAccess ::= ExprArrayBrackets
                          | /* epsilon */;
                          
TermExtension ::= TermExtension Mulop Factor
                | /* epsilon */;
                
CondFactExtension ::= Relop Expr
                    | /* epsilon */;
                    
CondTermExtension ::= CondTermExtension LOGICAL_AND CondFact
                    | /* epsilon */;
                    
ConditionExtension ::= ConditionExtension LOGICAL_OR CondTerm
                    | /* epsilon */;
                    
OptionalExpr ::= Expr
               | /* epsilon */;
               
ForLoop ::= FOR LEFT_PARENTHESES ForLoopInitialization SEMICOLON ForLoopCondition SEMICOLON ForLoopPostIteration RIGHT_PARENTHESES Statement;

ForLoopInitialization ::= DesignatorStatement ForLoopInitializationExtension
                        | /* epsilon */;
                        
ForLoopInitializationExtension ::= ForLoopInitializationExtension COMMA DesignatorStatement
                                 | /* epsilon */;
                                 
ForLoopCondition ::= CondFact
                   | /* epsilon */;
                   
ForLoopPostIteration ::= ForLoopInitialization;

DesignatorStatementOperation ::= Assignop Expr
                               | LEFT_PARENTHESES OptionalActPars RIGHT_PARENTHESES
                               | INCREMENT
                               | DECREMENT;
                               
DesignatorStatementArrayUnpacking ::= LEFT_BRACKET DesignatorList MULTIPLY Designator RIGHT_BRACKET Assignop Designator;

DesignatorList ::= DesignatorList OptionalDesignator COMMA
                 | /* epsilon */;
                 
OptionalDesignator ::= Designator
                     | /* epsilon */;
                     
OptionalElse ::= ELSE Statement
               | /* epsilon */;